# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
- name: Django Action
  # You may pin to the exact commit or the version.
  # uses: noah-software/django_action@da6e513b3afbad089396b7c1c330909a3a00925f
  uses: noah-software/django_action@v1.1
  with:
    # Commit message of the changed data
    commit_message: # optional, default is Added data schema
    # Path relative to the repository root, where the requirements.txt is located
    pip_path: # optional, default is requirements.txt
    # Output path for the generated data scheme
    output_path: # optional, default is schema.png
    # Path to the folder where manage.py is located
    project_path: # optional, default is ./
          
